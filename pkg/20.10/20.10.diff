--- 20.10.orig.sh	2022-02-08 17:43:23.946000000 +0530
+++ 20.10.sh	2022-02-08 17:43:05.131674908 +0530
@@ -27,6 +27,44 @@
 VERSION="20.10.11"
 DIND_TEST_WAIT=${DIND_TEST_WAIT:-3s}  # Wait time until docker start at dind test env
 
+# This will install the latest available Rancher specific Docker version on the OS.
+# Where $1 is current_version, $2 is search_command, $3 is pkg_version and $4 is pkg_manager
+install_latest_available_version() {
+	# Check if the current version is 20.10.2 or later
+	if [ "$1" = "20.10.2" ]; then
+    	echo "ERROR: Docker 20.10.1 is not supported by this installation script."
+        exit 0
+    fi
+	echo "INFO: Searching repository for VERSION '$1'"
+	echo "INFO: $2"
+	# check if the version is present in the package manager list
+	if [ -z "$3" ]; then
+		echo
+		echo "ERROR: '$1' not found amongst $4 results."
+		echo
+	else
+		echo "Installing Docker $1"
+		$sh_c "curl https://releases.rancher.com/install-docker/$1.sh | sh"
+		if [ "$(docker version | grep Version)" ]; then
+			echo "INFO: Docker $1 installed successfully."
+		fi
+		exit 0
+	fi
+}
+
+install_latest_available_version_for_non_s390x () {
+	if [ "$1" = "20.10.2" ]; then
+		echo "ERROR: Docker 20.10.1 is not supported by this installation script."
+		exit 0
+	fi
+	echo "Installing Docker $1 ..."
+	$sh_c "curl https://releases.rancher.com/install-docker/$1.sh | sh"
+	if [ "$(docker version | grep Version)" ]; then
+		echo "Docker $1 installed successfully."
+		exit 0
+	fi
+}
+
 # Issue https://github.com/rancher/rancher/issues/29246
 adjust_repo_releasever() {
 	DOWNLOAD_URL="https://download.docker.com"
@@ -365,7 +403,7 @@
 			esac
 		;;
 
-		centos|rhel|sles)
+		centos|rhel|sles|rocky)
 			if [ -z "$dist_version" ] && [ -r /etc/os-release ]; then
 				dist_version="$(. /etc/os-release && echo "$VERSION_ID")"
 			fi
@@ -433,18 +471,17 @@
 				if is_dry_run; then
 					echo "# WARNING: VERSION pinning is not supported in DRY_RUN"
 				else
-					# Will work for incomplete versions IE (17.12), but may not actually grab the "latest" if in the test channel
-					pkg_pattern="$(echo "$VERSION" | sed "s/-ce-/~ce~.*/g" | sed "s/-/.*/g").*-0~$lsb_dist"
-					search_command="apt-cache madison 'docker-ce' | grep '$pkg_pattern' | head -1 | awk '{\$1=\$1};1' | cut -d' ' -f 3"
-					pkg_version="$($sh_c "$search_command")"
-					echo "INFO: Searching repository for VERSION '$VERSION'"
-					echo "INFO: $search_command"
-					if [ -z "$pkg_version" ]; then
-						echo
-						echo "ERROR: '$VERSION' not found amongst apt-cache madison results"
-						echo
-						exit 1
-					fi
+					current_version=$VERSION
+					while :
+					do
+						pkg_pattern="$(echo "$current_version" | sed "s/-ce-/~ce~.*/g" | sed "s/-/.*/g").*-0~$lsb_dist"
+						search_command="apt-cache madison 'docker-ce' | grep '$pkg_pattern' | head -1 | awk '{\$1=\$1};1' | cut -d' ' -f 3"
+						pkg_version="$($sh_c "$search_command")"
+						# call install_latest_available_version to handle the installation.
+						install_latest_available_version "$current_version" "$search_command" "$pkg_version" "apt-cache madison"
+						lower_version=$(echo $current_version | awk -F. '{$NF = $NF - 1;} 1' | sed 's/ /./g')
+						current_version=$lower_version
+					done
 					if version_gte "18.09"; then
 							search_command="apt-cache madison 'docker-ce-cli' | grep '$pkg_pattern' | head -1 | awk '{\$1=\$1};1' | cut -d' ' -f 3"
 							echo "INFO: $search_command"
@@ -477,10 +514,17 @@
 			echo_docker_as_nonroot
 			exit 0
 			;;
-		centos|fedora|rhel|ol)
+		centos|fedora|rhel|ol|rocky)
 			if [ "$(uname -m)" != "s390x" ] && [ "$lsb_dist" = "rhel" ]; then
 				echo "Packages for RHEL are currently only available for s390x."
-				exit 1
+				echo "Trying to install a lower version of Docker."
+				current_version=$VERSION
+				while :
+				do
+					install_latest_available_version_for_non_s390x "current_version"
+					lower_version=$(echo $current_version | awk -F. '{$NF = $NF - 1;} 1' | sed 's/ /./g')
+					current_version=$lower_version
+				done
 			fi
                         # installing centos packages
 			yum_repo="$DOWNLOAD_URL/linux/centos/$REPO_FILE"
@@ -540,17 +584,17 @@
 				if is_dry_run; then
 					echo "# WARNING: VERSION pinning is not supported in DRY_RUN"
 				else
-					pkg_pattern="$(echo "$VERSION" | sed "s/-ce-/\\\\.ce.*/g" | sed "s/-/.*/g").*$pkg_suffix"
-					search_command="$pkg_manager list --showduplicates 'docker-ce' | grep '$pkg_pattern' | tail -1 | awk '{print \$2}'"
-					pkg_version="$($sh_c "$search_command")"
-					echo "INFO: Searching repository for VERSION '$VERSION'"
-					echo "INFO: $search_command"
-					if [ -z "$pkg_version" ]; then
-						echo
-						echo "ERROR: '$VERSION' not found amongst $pkg_manager list results"
-						echo
-						exit 1
-					fi
+					current_version=$VERSION
+					while :
+					do
+						pkg_pattern="$(echo "$current_version" | sed "s/-ce-/\\\\.ce.*/g" | sed "s/-/.*/g").*$pkg_suffix"
+						search_command="$pkg_manager list --showduplicates 'docker-ce' | grep '$pkg_pattern' | tail -1 | awk '{print \$2}'"
+						pkg_version="$($sh_c "$search_command")"
+						# call install_docker_latest_available_version to handle the installation.
+						install_latest_available_version "$current_version" "$search_command" "$pkg_version" "$pkg_manager"
+						lower_version=$(echo $current_version | awk -F. '{$NF = $NF - 1;} 1' | sed 's/ /./g')
+						current_version=$lower_version
+					done
 					if version_gte "18.09"; then
 						# older versions don't support a cli package
 						search_command="$pkg_manager list --showduplicates 'docker-ce-cli' | grep '$pkg_pattern' | tail -1 | awk '{print \$2}'"
@@ -579,7 +623,14 @@
 		sles)
 			if [ "$(uname -m)" != "s390x" ]; then
 				echo "Packages for SLES are currently only available for s390x"
-				exit 1
+				echo "Trying to install a lower version of Docker."
+				current_version=$VERSION
+				while :
+				do
+					install_latest_available_version_for_non_s390x "$current_version"
+					lower_version=$(echo $current_version | awk -F. '{$NF = $NF - 1;} 1' | sed 's/ /./g')
+					current_version=$lower_version
+				done
 			fi
 			sles_repo="$DOWNLOAD_URL/linux/$lsb_dist/$REPO_FILE"
 			opensuse_repo="https://download.opensuse.org/repositories/security:SELinux/SLE_15_SP2/security:SELinux.repo"
@@ -612,17 +663,17 @@
 				if is_dry_run; then
 					echo "# WARNING: VERSION pinning is not supported in DRY_RUN"
 				else
-					pkg_pattern="$(echo "$VERSION" | sed "s/-ce-/\\\\.ce.*/g" | sed "s/-/.*/g")"
-					search_command="zypper search -s --match-exact 'docker-ce' | grep '$pkg_pattern' | tail -1 | awk '{print \$6}'"
-					pkg_version="$($sh_c "$search_command")"
-					echo "INFO: Searching repository for VERSION '$VERSION'"
-					echo "INFO: $search_command"
-					if [ -z "$pkg_version" ]; then
-						echo
-						echo "ERROR: '$VERSION' not found amongst zypper list results"
-						echo
-						exit 1
-					fi
+					current_version=$VERSION
+					while :
+					do
+						pkg_pattern="$(echo "$current_version" | sed "s/-ce-/\\\\.ce.*/g" | sed "s/-/.*/g")"
+						search_command="zypper search -s --match-exact 'docker-ce' | grep '$pkg_pattern' | tail -1 | awk '{print \$6}'"
+						pkg_version="$($sh_c "$search_command")"
+						# caall
+						install_latest_available_version "$current_version" "$search_command" "zypper"
+						lower_version=$(echo $current_version | awk -F. '{$NF = $NF - 1;} 1' | sed 's/ /./g')
+						current_version=$lower_version
+					done
 					search_command="zypper search -s --match-exact 'docker-ce-cli' | grep '$pkg_pattern' | tail -1 | awk '{print \$6}'"
 					# It's okay for cli_pkg_version to be blank, since older versions don't support a cli package
 					cli_pkg_version="$($sh_c "$search_command")"
